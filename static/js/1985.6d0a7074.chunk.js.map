{"version":3,"file":"static/js/1985.6d0a7074.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/notice/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/notice/notice.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/notice/notice.scss?tag=calcite-notice&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/conditionalSlot.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/openCloseComponent.ts"],"sourcesContent":["export const KindIcons = {\n  brand: \"lightbulb\",\n  danger: \"exclamationMarkTriangle\",\n  info: \"information\",\n  success: \"checkCircle\",\n  warning: \"exclamationMarkTriangle\",\n};\n","export const SLOTS = {\n  title: \"title\",\n  message: \"message\",\n  link: \"link\",\n  actionsEnd: \"actions-end\",\n};\n\nexport const CSS = {\n  actionsEnd: \"actions-end\",\n  close: \"notice-close\",\n  container: \"container\",\n  content: \"notice-content\",\n  icon: \"notice-icon\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { getSlotted, setRequestedIcon } from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { Kind, Scale, Width } from \"../interfaces\";\nimport { KindIcons } from \"../resources\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { getIconScale } from \"../../utils/component\";\nimport { NoticeMessages } from \"./assets/notice/t9n\";\nimport { CSS, SLOTS } from \"./resources\";\n\n/**\n * Notices are intended to be used to present users with important-but-not-crucial contextual tips or copy. Because\n * notices are displayed inline, a common use case is displaying them on page-load to present users with short hints or contextual copy.\n * They are optionally closable - useful for keeping track of whether or not a user has closed the notice. You can also choose not\n * to display a notice on page load and set the \"active\" attribute as needed to contextually provide inline messaging to users.\n */\n\n/**\n * @slot title - A slot for adding the title.\n * @slot message - A slot for adding the message.\n * @slot link - A slot for adding a `calcite-action` to take, such as: \"undo\", \"try again\", \"link to page\", etc.\n * @slot actions-end - A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or less actions.\n */\n\n@Component({\n  tag: \"calcite-notice\",\n  styleUrl: \"notice.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Notice\n  implements\n    ConditionalSlotComponent,\n    LoadableComponent,\n    T9nComponent,\n    LocalizedComponent,\n    OpenCloseComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //---------------------------------------------------------------------------\n\n  /** When `true`, the component is visible. */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n  }\n\n  /** Specifies the kind of the component, which will apply to top border and icon. */\n  @Prop({ reflect: true }) kind: Extract<\n    \"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\",\n    Kind\n  > = \"brand\";\n\n  /** When `true`, a close button is added to the component. */\n  @Prop({ reflect: true }) closable = false;\n\n  /**\n   * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.\n   */\n  @Prop({ reflect: true }) icon: string | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the width of the component. */\n  @Prop({ reflect: true }) width: Width = \"auto\";\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: NoticeMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<NoticeMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  @Watch(\"icon\")\n  @Watch(\"kind\")\n  updateRequestedIcon(): void {\n    this.requestedIcon = setRequestedIcon(KindIcons, this.icon, this.kind);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectConditionalSlotComponent(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    this.requestedIcon = setRequestedIcon(KindIcons, this.icon, this.kind);\n    await setUpMessages(this);\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  render(): VNode {\n    const { el } = this;\n    const closeButton = (\n      <button\n        aria-label={this.messages.close}\n        class={CSS.close}\n        onClick={this.close}\n        ref={(el) => (this.closeButton = el)}\n      >\n        <calcite-icon icon=\"x\" scale={getIconScale(this.scale)} />\n      </button>\n    );\n\n    const hasActionEnd = getSlotted(el, SLOTS.actionsEnd);\n\n    return (\n      <div class={CSS.container} ref={this.setTransitionEl}>\n        {this.requestedIcon ? (\n          <div class={CSS.icon}>\n            <calcite-icon\n              flipRtl={this.iconFlipRtl}\n              icon={this.requestedIcon}\n              scale={getIconScale(this.scale)}\n            />\n          </div>\n        ) : null}\n        <div class={CSS.content}>\n          <slot name={SLOTS.title} />\n          <slot name={SLOTS.message} />\n          <slot name={SLOTS.link} />\n        </div>\n        {hasActionEnd ? (\n          <div class={CSS.actionsEnd}>\n            <slot name={SLOTS.actionsEnd} />\n          </div>\n        ) : null}\n        {this.closable ? closeButton : null}\n      </div>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteNoticeBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteNoticeBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteNoticeClose: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteNoticeOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    const noticeLinkEl = this.el.querySelector(\"calcite-link\");\n\n    if (!this.closeButton && !noticeLinkEl) {\n      return;\n    }\n    if (noticeLinkEl) {\n      return noticeLinkEl.setFocus();\n    } else if (this.closeButton) {\n      this.closeButton.focus();\n    }\n  }\n\n  onBeforeClose(): void {\n    this.calciteNoticeBeforeClose.emit();\n  }\n\n  onBeforeOpen(): void {\n    this.calciteNoticeBeforeOpen.emit();\n  }\n\n  onClose(): void {\n    this.calciteNoticeClose.emit();\n  }\n\n  onOpen(): void {\n    this.calciteNoticeOpen.emit();\n  }\n\n  private setTransitionEl = (el: HTMLElement): void => {\n    this.transitionEl = el;\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n  private close = (): void => {\n    this.open = false;\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteNoticeElement;\n\n  /** The close button element. */\n  private closeButton?: HTMLButtonElement;\n\n  /** The computed icon to render. */\n  private requestedIcon?: string;\n\n  @State() effectiveLocale: string;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: NoticeMessages;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLElement;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-notice-width: The width of the component.\n */\n\n// scale variables\n:host([scale=\"s\"]) {\n  --calcite-notice-spacing-token-small: theme(\"spacing.2\");\n  --calcite-notice-spacing-token-large: theme(\"spacing.3\");\n  @include slotted(\"title\", \"*\", \".container\") {\n    @apply text-n1-wrap my-0.5;\n  }\n  @include slotted(\"message\", \"*\", \".container\") {\n    @apply text-n2-wrap my-0.5;\n  }\n  ::slotted(calcite-link) {\n    @apply text-n2-wrap my-0.5;\n  }\n  .notice-close {\n    // specific padding for close button to align with calcite-action small-scale spacing\n    @apply p-2;\n  }\n}\n\n:host([scale=\"m\"]) {\n  --calcite-notice-spacing-token-small: theme(\"spacing.3\");\n  --calcite-notice-spacing-token-large: theme(\"spacing.4\");\n  @include slotted(\"title\", \"*\", \".container\") {\n    @apply text-0-wrap my-0.5;\n  }\n  @include slotted(\"message\", \"*\", \".container\") {\n    @apply text-n1-wrap my-0.5;\n  }\n  ::slotted(calcite-link) {\n    @apply text-n1-wrap my-0.5;\n  }\n}\n\n:host([scale=\"l\"]) {\n  --calcite-notice-spacing-token-small: theme(\"spacing.4\");\n  --calcite-notice-spacing-token-large: theme(\"spacing.5\");\n  @include slotted(\"title\", \"*\", \".container\") {\n    @apply text-1-wrap my-0.5;\n  }\n  @include slotted(\"message\", \"*\", \".container\") {\n    @apply text-0-wrap my-0.5;\n  }\n  ::slotted(calcite-link) {\n    @apply text-0-wrap my-0.5;\n  }\n}\n\n:host([width=\"auto\"]) {\n  --calcite-notice-width: theme(\"width.auto\");\n}\n\n:host([width=\"half\"]) {\n  --calcite-notice-width: theme(\"width[1/2]\");\n}\n\n:host([width=\"full\"]) {\n  --calcite-notice-width: theme(\"width.full\");\n}\n\n:host {\n  @apply mx-auto hidden max-w-full items-center;\n  inline-size: var(--calcite-notice-width);\n}\n\n.container {\n  @apply bg-foreground-1\n    pointer-events-none\n    my-0\n    box-border\n    hidden\n    w-full\n    opacity-0\n    transition-default;\n  max-block-size: 0;\n  text-align: start;\n  border-inline-start: 0px solid;\n  box-shadow: 0 0 0 0 transparent;\n}\n\n// focus styles\n.notice-close {\n  @apply focus-base;\n  &:focus {\n    @apply focus-inset;\n  }\n}\n\n:host {\n  @apply flex;\n}\n\n:host([open]) .container {\n  @apply shadow-1\n    pointer-events-auto\n    flex\n    max-h-full\n    items-center\n    border-2\n    opacity-100;\n}\n\n@include slotted(\"title\", \"*\", \".container\") {\n  @apply text-color-1 m-0 font-medium;\n}\n\n@include slotted(\"message\", \"*\", \".container\") {\n  @apply text-color-2 m-0 inline font-normal;\n  margin-inline-end: var(--calcite-notice-spacing-token-small);\n}\n\n@mixin notice-element-base() {\n  @apply transition-default box-border;\n  padding-block: var(--calcite-notice-spacing-token-small);\n  padding-inline: var(--calcite-notice-spacing-token-large);\n  flex: 0 0 auto;\n}\n\n.notice-content {\n  @include notice-element-base;\n  @apply flex min-w-0 flex-col break-words;\n  flex: 1 1 0;\n  padding-block: var(--calcite-notice-spacing-token-small);\n  padding-inline: 0 var(--calcite-notice-spacing-token-small);\n\n  &:first-of-type:not(:only-child) {\n    padding-inline-start: var(--calcite-notice-spacing-token-large);\n  }\n  &:only-of-type {\n    padding-block: var(--calcite-notice-spacing-token-small);\n    padding-inline: var(--calcite-notice-spacing-token-large);\n  }\n}\n\n.notice-icon {\n  @apply flex items-center;\n  @include notice-element-base;\n}\n\n.notice-close {\n  @apply text-color-3 flex cursor-pointer items-center self-stretch border-none bg-transparent outline-none;\n  @include notice-element-base;\n  -webkit-appearance: none;\n\n  &:hover,\n  &:focus {\n    @apply bg-foreground-2 text-color-1;\n  }\n\n  &:active {\n    @apply bg-foreground-3;\n  }\n}\n\n.actions-end {\n  @apply flex self-stretch;\n}\n\n$noticeKinds:\n  \"brand\" var(--calcite-color-brand),\n  \"info\" var(--calcite-color-status-info),\n  \"danger\" var(--calcite-color-status-danger),\n  \"success\" var(--calcite-color-status-success),\n  \"warning\" var(--calcite-color-status-warning);\n\n@each $noticeKind in $noticeKinds {\n  $name: nth($noticeKind, 1);\n  $kind: nth($noticeKind, 2);\n\n  :host([kind=\"#{$name}\"]) .container {\n    border-color: $kind;\n    & .notice-icon {\n      color: $kind;\n    }\n  }\n}\n\n@include base-component();\n","import { forceUpdate } from \"@stencil/core\";\nimport { createObserver, ExtendedMutationObserver } from \"./observers\";\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: ExtendedMutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  mutationObserver.unobserve(component.el);\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n","import { readTask } from \"@stencil/core\";\n/**\n * Defines interface for components with open/close public emitter.\n * All implementations of this interface must handle the following events: `beforeOpen`, `open`, `beforeClose`, `close`.\n */\nexport interface OpenCloseComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * When true, the component opens.\n   */\n  open?: boolean;\n\n  /**\n   * When true, the component is open.\n   */\n  opened?: boolean;\n\n  /**\n   *  Specifies the name of transitionProp.\n   */\n  transitionProp?: string;\n\n  /**\n   * Specifies property on which active transition is watched for.\n   */\n  openTransitionProp: string;\n\n  /**\n   * Specifies element that the transition is allowed to emit on.\n   */\n  transitionEl: HTMLElement;\n\n  /**\n   * Defines method for `beforeOpen` event handler.\n   */\n  onBeforeOpen: () => void;\n\n  /**\n   * Defines method for `open` event handler:\n   */\n  onOpen: () => void;\n\n  /**\n   * Defines method for `beforeClose` event handler:\n   */\n  onBeforeClose: () => void;\n\n  /**\n   * Defines method for `close` event handler:\n   */\n  onClose: () => void;\n}\n\nfunction isOpen(component: OpenCloseComponent): boolean {\n  return \"opened\" in component ? component.opened : component.open;\n}\n\nfunction emitImmediately(component: OpenCloseComponent, nonOpenCloseComponent = false): void {\n  (nonOpenCloseComponent ? component[component.transitionProp] : isOpen(component))\n    ? component.onBeforeOpen()\n    : component.onBeforeClose();\n  (nonOpenCloseComponent ? component[component.transitionProp] : isOpen(component))\n    ? component.onOpen()\n    : component.onClose();\n}\n\n/**\n * Helper to determine globally set transition duration on the given openTransitionProp, which is imported and set in the @Watch(\"open\").\n * Used to emit (before)open/close events both for when the opacity transition is present and when there is none (transition-duration is set to 0).\n *\n * @example\n * import { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\n *\n * async componentWillLoad() {\n * // When component initially renders, if `open` was set we need to trigger on load as watcher doesn't fire.\n * if (this.open) {\n *    onToggleOpenCloseComponent(this);\n * }\n * @Watch(\"open\")\n * async toggleModal(value: boolean): Promise<void> {\n *    onToggleOpenCloseComponent(this);\n * }\n *\n * @param component - OpenCloseComponent uses `open` prop to emit (before)open/close.\n * @param nonOpenCloseComponent - OpenCloseComponent uses `expanded` prop to emit (before)open/close.\n */\nexport function onToggleOpenCloseComponent(component: OpenCloseComponent, nonOpenCloseComponent = false): void {\n  readTask((): void => {\n    if (!component.transitionEl) {\n      return;\n    }\n\n    const { transitionDuration: allDurations, transitionProperty: allProps } = getComputedStyle(component.transitionEl);\n    const allTransitionDurationsArray = allDurations.split(\",\");\n    const allTransitionPropsArray = allProps.split(\",\");\n    const openTransitionPropIndex = allTransitionPropsArray.indexOf(component.openTransitionProp);\n    const transitionDuration =\n      allTransitionDurationsArray[openTransitionPropIndex] ??\n      /* Safari will have a single transition value if multiple props share it,\n            so we fall back to it if there's no matching prop duration */\n      allTransitionDurationsArray[0];\n    if (transitionDuration === \"0s\") {\n      emitImmediately(component, nonOpenCloseComponent);\n      return;\n    }\n    const fallbackTimeoutId = setTimeout(\n      (): void => {\n        component.transitionEl.removeEventListener(\"transitionstart\", onStart);\n        component.transitionEl.removeEventListener(\"transitionend\", onEndOrCancel);\n        component.transitionEl.removeEventListener(\"transitioncancel\", onEndOrCancel);\n        emitImmediately(component, nonOpenCloseComponent);\n      },\n      parseFloat(transitionDuration) * 1000,\n    );\n    component.transitionEl.addEventListener(\"transitionstart\", onStart);\n    component.transitionEl.addEventListener(\"transitionend\", onEndOrCancel);\n    component.transitionEl.addEventListener(\"transitioncancel\", onEndOrCancel);\n\n    function onStart(event: TransitionEvent): void {\n      if (event.propertyName === component.openTransitionProp && event.target === component.transitionEl) {\n        clearTimeout(fallbackTimeoutId);\n        component.transitionEl.removeEventListener(\"transitionstart\", onStart);\n        (nonOpenCloseComponent ? component[component.transitionProp] : isOpen(component))\n          ? component.onBeforeOpen()\n          : component.onBeforeClose();\n      }\n    }\n\n    function onEndOrCancel(event: TransitionEvent): void {\n      if (event.propertyName === component.openTransitionProp && event.target === component.transitionEl) {\n        (nonOpenCloseComponent ? component[component.transitionProp] : isOpen(component))\n          ? component.onOpen()\n          : component.onClose();\n\n        component.transitionEl.removeEventListener(\"transitionend\", onEndOrCancel);\n        component.transitionEl.removeEventListener(\"transitioncancel\", onEndOrCancel);\n      }\n    }\n  });\n}\n"],"names":["KindIcons","brand","danger","info","success","warning","SLOTS","CSS","Notice","proxyCustomElement","HTMLElement","setTransitionEl","el","this","transitionEl","close","open","openTransitionProp","openHandler","onToggleOpenCloseComponent","onMessagesChange","updateRequestedIcon","requestedIcon","setRequestedIcon","icon","kind","connectedCallback","connectConditionalSlotComponent","connectLocalized","connectMessages","disconnectedCallback","disconnectConditionalSlotComponent","disconnectLocalized","disconnectMessages","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","render","closeButton","h","key","messages","class","onClick","ref","scale","getIconScale","hasActionEnd","getSlotted","flipRtl","iconFlipRtl","name","closable","setFocus","componentFocusable","noticeLinkEl","querySelector","focus","onBeforeClose","calciteNoticeBeforeClose","emit","onBeforeOpen","calciteNoticeBeforeOpen","onClose","calciteNoticeClose","onOpen","calciteNoticeOpen","effectiveLocaleChange","updateMessages","effectiveLocale","mutationObserver","observerOptions","childList","component","createObserver","processMutations","observe","unobserve","mutations","forEach","_ref","target","forceUpdate","isOpen","opened","emitImmediately","nonOpenCloseComponent","arguments","length","undefined","transitionProp","readTask","_allTransitionDuratio","transitionDuration","allDurations","transitionProperty","allProps","getComputedStyle","allTransitionDurationsArray","split","indexOf","fallbackTimeoutId","setTimeout","removeEventListener","onStart","onEndOrCancel","parseFloat","event","propertyName","clearTimeout","addEventListener"],"sourceRoot":""}