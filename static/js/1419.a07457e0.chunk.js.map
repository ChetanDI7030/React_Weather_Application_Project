{"version":3,"file":"static/js/1419.a07457e0.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/utils/component.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.tsx","../node_modules/@esri/calcite-components/dist/components/src/utils/key.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/loadable.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/number.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/locale.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/observers.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/t9n.ts"],"sourcesContent":["import { Build, forceUpdate as stencilForceUpdate } from \"@stencil/core\";\nimport { HTMLStencilElement } from \"@stencil/core/internal\";\nimport { Scale } from \"../components/interfaces\";\n\nexport function getIconScale(componentScale: Scale): Extract<Scale, \"s\" | \"m\"> {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\n\n/**\n * This util helps us wait for a component to be ready for both lazy-loading (`dist` output) and non-lazy-loading (`components` output) components.\n *\n * Based on https://github.com/ionic-team/ionic-framework/blob/1a8bd6d/core/src/utils/helpers.ts#L60C1-L79C3\n *\n * @param el - the host element to wait for\n */\nexport async function componentOnReady(el: HTMLElement): Promise<void> {\n  await (isStencilEl(el)\n    ? el.componentOnReady()\n    : new Promise<void>((resolve) => requestAnimationFrame(() => resolve())));\n}\n\nfunction isStencilEl(el: HTMLElement): el is HTMLStencilElement {\n  return typeof (el as HTMLStencilElement).componentOnReady === \"function\";\n}\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport const forceUpdate = Build.isTesting\n  ? stencilForceUpdate\n  : () => {\n      /* noop */\n    };\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param el the component's host element\n * @returns Promise<void>\n */\nexport async function componentFocusable(el: HTMLElement): Promise<void> {\n  await componentOnReady(el);\n\n  if (!Build.isBrowser && !Build.isTesting) {\n    return;\n  }\n\n  forceUpdate(el);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n","export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\n\nexport interface FetchIconProps {\n  icon: string;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nfunction generateIconId({ icon, scale }: FetchIconProps): string {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n\n  return `${iconName}${size}${filled ? \"F\" : \"\"}`;\n}\n\nexport async function fetchIcon(props: FetchIconProps): Promise<CalciteIconPath> {\n  const cachedIconKey = generateIconId(props);\n  const cachedIconData = getCachedIconDataByKey(cachedIconKey);\n\n  if (cachedIconData) {\n    return cachedIconData;\n  }\n\n  if (!requestCache[cachedIconKey]) {\n    requestCache[cachedIconKey] = fetch(getAssetPath(`./assets/icon/${cachedIconKey}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${cachedIconKey}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[cachedIconKey];\n  iconCache[cachedIconKey] = path;\n\n  return path;\n}\n\n/**\n * Util to retrieve cached icon data based on icon name and scale.\n *\n * @param props – icon properties\n */\nexport function getCachedIconData(props: FetchIconProps): CalciteIconPath {\n  return getCachedIconDataByKey(generateIconId(props));\n}\n\nfunction getCachedIconDataByKey(id: string): CalciteIconPath {\n  return iconCache[id];\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name – an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: The component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Build, Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, getCachedIconData, scaleToPx } from \"./utils\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: string = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    if (!this.visible) {\n      this.waitUntilVisible(() => {\n        this.visible = true;\n        this.loadIconPathData();\n      });\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!Build.isBrowser || !icon || !visible) {\n      return;\n    }\n\n    const fetchIconProps = { icon, scale };\n    const pathData = getCachedIconData(fetchIconProps) || (await fetchIcon(fetchIconProps));\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n","export function isActivationKey(key: string): boolean {\n  return key === \"Enter\" || key === \" \";\n}\n\nexport const numberKeys = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nexport const letterKeys = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n];\n","import { componentFocusable as componentFocusableReplacement } from \"./component\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n *\n * @deprecated use `componentOnReady` from `components.ts` instead.\n */\nexport interface LoadableComponent {\n  /**\n   * The host element.\n   */\n  el: HTMLElement;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad?: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad?: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n *\n * @deprecated use `componentOnReady` from `components.ts` instead.\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n *\n * @deprecated use `componentOnReady` from `components.ts` instead.\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n *\n * @deprecated use `componentOnReady` from `components.ts` instead.\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n *\n * @deprecated use `componentFocusable` from `components.ts` instead.\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentFocusableReplacement(component.el);\n}\n","import { numberKeys } from \"./key\";\nimport { NumberStringFormat } from \"./locale\";\n\nconst unnecessaryDecimal = new RegExp(`\\\\${\".\"}(0+)?$`);\nconst trailingZeros = new RegExp(\"0+$\");\n\n// adopted from https://stackoverflow.com/a/66939244\nexport class BigDecimal {\n  value: bigint;\n\n  // BigInt(\"-0\").toString() === \"0\" which removes the minus sign when typing numbers like -0.1\n  isNegative: boolean;\n\n  // Configuration: constants\n  static DECIMALS = 100; // number of decimals on all instances\n\n  static ROUNDED = true; // numbers are truncated (false) or rounded (true)\n\n  static SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\n\n  constructor(input: string | BigDecimal) {\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = expandExponentialNumberString(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n      BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n\n  static _divRound = (dividend: bigint, divisor: bigint): BigDecimal =>\n    BigDecimal.fromBigInt(\n      dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)),\n    );\n\n  static fromBigInt = (bigint: bigint): BigDecimal =>\n    Object.assign(Object.create(BigDecimal.prototype), { value: bigint, isNegative: bigint < BigInt(0) });\n\n  getIntegersAndDecimals(): { integers: string; decimals: string } {\n    const s = this.value\n      .toString()\n      .replace(\"-\", \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(trailingZeros, \"\");\n    return { integers, decimals };\n  }\n\n  toString(): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n\n  formatToParts(formatter: NumberStringFormat): Intl.NumberFormatPart[] {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char: string) => parts.push({ type: \"fraction\", value: char }));\n    }\n\n    return parts;\n  }\n\n  format(formatter: NumberStringFormat): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(\n      BigInt(integers),\n    )}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n          .split(\"\")\n          .map((char: string) => formatter.numberFormatter.format(Number(char)))\n          .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n\n  add(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value + new BigDecimal(n).value);\n  }\n\n  subtract(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value - new BigDecimal(n).value);\n  }\n\n  multiply(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * new BigDecimal(n).value, BigDecimal.SHIFT);\n  }\n\n  divide(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(n).value);\n  }\n}\n\nexport function isValidNumber(numberString: string): boolean {\n  return !(!numberString || isNaN(Number(numberString)));\n}\n\nexport function parseNumberString(numberString?: string): string {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n        if (value.match(/\\./g) && !containsDecimal) {\n          containsDecimal = true;\n          return true;\n        }\n        if (value.match(/-/g) && i === 0) {\n          return true;\n        }\n        return numberKeys.includes(value);\n      })\n      .join(\"\");\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst hasTrailingDecimalZeros = /0*$/;\n\nexport const sanitizeNumberString = (numberString: string): string =>\n  sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    const sanitizedValue = nonExpoNumString\n      .replace(allHyphensExceptTheStart, \"\")\n      .replace(decimalOnlyAtEndOfString, \"\")\n      .replace(allLeadingZerosOptionallyNegative, \"$1\");\n    return isValidNumber(sanitizedValue)\n      ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n        ? sanitizedValue\n        : getBigDecimalAsString(sanitizedValue)\n      : nonExpoNumString;\n  });\n\nexport function getBigDecimalAsString(sanitizedValue: string): string {\n  const sanitizedValueDecimals = sanitizedValue.split(\".\")[1];\n  const value = new BigDecimal(sanitizedValue).toString();\n  const [bigDecimalValueInteger, bigDecimalValueDecimals] = value.split(\".\");\n\n  return sanitizedValueDecimals && bigDecimalValueDecimals !== sanitizedValueDecimals\n    ? `${bigDecimalValueInteger}.${sanitizedValueDecimals}`\n    : value;\n}\n\nexport function sanitizeExponentialNumberString(numberString: string, func: (s: string) => string): string {\n  if (!numberString) {\n    return numberString;\n  }\n\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n\n  if (!firstE) {\n    return func(numberString);\n  }\n\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\n\n/**\n * Converts an exponential notation numberString into decimal notation.\n * BigInt doesn't support exponential notation, so this is required to maintain precision\n *\n * @param {string} numberString - pre-validated exponential or decimal number\n * @returns {string} numberString in decimal notation\n */\nexport function expandExponentialNumberString(numberString: string): string {\n  const exponentialParts = numberString.split(/[eE]/);\n  if (exponentialParts.length === 1) {\n    return numberString;\n  }\n\n  const number = +numberString;\n  if (Number.isSafeInteger(number)) {\n    return `${number}`;\n  }\n\n  const isNegative = numberString.charAt(0) === \"-\";\n  const magnitude = +exponentialParts[1];\n  const decimalParts = exponentialParts[0].split(\".\");\n  const integers = (isNegative ? decimalParts[0].substring(1) : decimalParts[0]) || \"\";\n  const decimals = decimalParts[1] || \"\";\n\n  const shiftDecimalLeft = (integers: string, magnitude: number): string => {\n    const magnitudeDelta = Math.abs(magnitude) - integers.length;\n    const leftPaddedZeros = magnitudeDelta > 0 ? `${\"0\".repeat(magnitudeDelta)}${integers}` : integers;\n    const shiftedDecimal = `${leftPaddedZeros.slice(0, magnitude)}${\".\"}${leftPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const shiftDecimalRight = (decimals: string, magnitude: number): string => {\n    const rightPaddedZeros =\n      magnitude > decimals.length ? `${decimals}${\"0\".repeat(magnitude - decimals.length)}` : decimals;\n    const shiftedDecimal = `${rightPaddedZeros.slice(0, magnitude)}${\".\"}${rightPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const expandedNumberString =\n    magnitude > 0\n      ? `${integers}${shiftDecimalRight(decimals, magnitude)}`\n      : `${shiftDecimalLeft(integers, magnitude)}${decimals}`;\n\n  return `${isNegative ? \"-\" : \"\"}${expandedNumberString.charAt(0) === \".\" ? \"0\" : \"\"}${expandedNumberString\n    .replace(unnecessaryDecimal, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"\")}`;\n}\n\nfunction stringContainsNumbers(string: string): boolean {\n  return numberKeys.some((number) => string.includes(number));\n}\n\n/**\n * Adds localized trailing decimals zero values to the number string.\n * BigInt conversion to string removes the trailing decimal zero values (Ex: 1.000 is returned as 1). This method helps adding them back.\n *\n * @param {string} localizedValue - localized number string value\n * @param {string} value - current value in the input field\n * @param {NumberStringFormat} formatter - numberStringFormatter instance to localize the number value\n * @returns {string} localized number string value\n */\nexport function addLocalizedTrailingDecimalZeros(\n  localizedValue: string,\n  value: string,\n  formatter: NumberStringFormat,\n): string {\n  const decimals = value.split(\".\")[1];\n  if (decimals) {\n    const trailingDecimalZeros = decimals.match(hasTrailingDecimalZeros)[0];\n    if (\n      trailingDecimalZeros &&\n      formatter.delocalize(localizedValue).length !== value.length &&\n      decimals.indexOf(\"e\") === -1\n    ) {\n      const decimalSeparator = formatter.decimal;\n      localizedValue = !localizedValue.includes(decimalSeparator)\n        ? `${localizedValue}${decimalSeparator}`\n        : localizedValue;\n      return localizedValue.padEnd(localizedValue.length + trailingDecimalZeros.length, formatter.localize(\"0\"));\n    }\n  }\n  return localizedValue;\n}\n","import { closestElementCrossShadowBoundary, containsCrossShadowBoundary } from \"./dom\";\nimport { BigDecimal, isValidNumber, sanitizeExponentialNumberString } from \"./number\";\nimport { createObserver } from \"./observers\";\n\nexport const defaultLocale = \"en\";\n\nexport const t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-AT\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const numberingSystems = [\"arab\", \"arabext\", \"latn\"] as const;\n\nexport const supportedLocales = [...new Set([...t9nLocales, ...locales])] as const;\n\nexport type NumberingSystem = (typeof numberingSystems)[number];\n\nexport type SupportedLocale = (typeof supportedLocales)[number];\n\nconst isNumberingSystemSupported = (numberingSystem: string): numberingSystem is NumberingSystem =>\n  numberingSystems.includes(numberingSystem as NumberingSystem);\n\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\n\n// for consistent browser behavior, we normalize numberingSystem to prevent the browser-inferred value\n// see https://github.com/Esri/calcite-design-system/issues/3079#issuecomment-1168964195 for more info\nexport const defaultNumberingSystem =\n  browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n    ? \"latn\"\n    : browserNumberingSystem;\n\nexport const getSupportedNumberingSystem = (numberingSystem: string): NumberingSystem =>\n  isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale – the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nexport function getSupportedLocale(locale: string, context: \"cldr\" | \"t9n\" = \"cldr\"): SupportedLocale {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n\n  if (!locale) {\n    return defaultLocale;\n  }\n\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n\n  locale = locale.toLowerCase();\n\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n\n  if (!contextualLocales.includes(locale)) {\n    console.warn(\n      `Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`,\n    );\n    return defaultLocale;\n  }\n\n  return locale;\n}\n\n/**\n * This interface is for components that need to determine locale from the lang attribute.\n */\nexport interface LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * Used to store the effective locale to avoid multiple lookups.\n   *\n   * This is an internal property and should:\n   *\n   * - use the `@State` decorator\n   * - be initialized to \"\"\n   *\n   * Components should watch this prop to ensure messages are updated.\n   *\n   * @Watch(\"effectiveLocale\")\n   * effectiveLocaleChange(): void {\n   *   updateMessages(this, this.effectiveLocale);\n   * }\n   */\n  effectiveLocale: string;\n}\n\nconst connectedComponents = new Set<LocalizedComponent>();\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nexport function connectLocalized(component: LocalizedComponent): void {\n  updateEffectiveLocale(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true,\n    });\n  }\n\n  connectedComponents.add(component);\n}\n\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nexport function updateEffectiveLocale(component: LocalizedComponent): void {\n  component.effectiveLocale = getLocale(component);\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectLocalized(component: LocalizedComponent): void {\n  connectedComponents.delete(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\n\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target as HTMLElement;\n\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n\n      if (inUnrelatedSubtree) {\n        return;\n      }\n\n      const closestLangEl = closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\");\n\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n\n      const closestLang = closestLangEl.lang;\n\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component: LocalizedComponent): string {\n  return (\n    component.el.lang ||\n    closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale\n  );\n}\n\nexport interface NumberStringFormatOptions extends Intl.NumberFormatOptions {\n  numberingSystem: NumberingSystem;\n  locale: string;\n}\n\n/**\n * This util formats and parses numbers for localization\n */\nexport class NumberStringFormat {\n  /**\n   * The actual group separator for the specified locale.\n   * White-space group separators are changed to the non-breaking space (nbsp) unicode character.\n   * so we replace them with a normal <SPACE>.\n   */\n  private _actualGroup: string;\n\n  /** the corrected group separator */\n  private _group: string;\n\n  get group(): string {\n    return this._group;\n  }\n\n  private _decimal: string;\n\n  get decimal(): string {\n    return this._decimal;\n  }\n\n  private _minusSign: string;\n\n  get minusSign(): string {\n    return this._minusSign;\n  }\n\n  private _digits: Array<string>;\n\n  get digits(): Array<string> {\n    return this._digits;\n  }\n\n  private _getDigitIndex;\n\n  private _numberFormatter: Intl.NumberFormat;\n\n  get numberFormatter(): Intl.NumberFormat {\n    return this._numberFormatter;\n  }\n\n  private _numberFormatOptions: NumberStringFormatOptions;\n\n  get numberFormatOptions(): NumberStringFormatOptions {\n    return this._numberFormatOptions;\n  }\n\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options: NumberStringFormatOptions) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n\n    if (\n      // No need to create the formatter if `locale` and `numberingSystem`\n      // are the default values and `numberFormatOptions` has not been set\n      (!this._numberFormatOptions &&\n        options.locale === defaultLocale &&\n        options.numberingSystem === defaultNumberingSystem &&\n        // don't skip initialization if any options besides locale/numberingSystem are set\n        Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)\n    ) {\n      return;\n    }\n\n    this._numberFormatOptions = options;\n\n    this._numberFormatter = new Intl.NumberFormat(\n      this._numberFormatOptions.locale,\n      this._numberFormatOptions as Intl.NumberFormatOptions,\n    );\n\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem,\n      } as Intl.NumberFormatOptions).format(9876543210),\n    ].reverse();\n\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n\n    // numberingSystem is parsed to return consistent decimal separator across browsers.\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale, {\n      numberingSystem: this._numberFormatOptions.numberingSystem,\n    } as Intl.NumberFormatOptions).formatToParts(-12345678.9);\n\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group separators to the unicode non-breaking space (nbsp)\n    this._group = this._actualGroup.trim().length === 0 || this._actualGroup == \" \" ? \"\\u00A0\" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d: string) => index.get(d);\n  }\n\n  delocalize = (numberString: string): string =>\n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          nonExpoNumString\n            .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n            .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n            .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n            .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex),\n        )\n      : numberString;\n\n  localize = (numberString: string): string =>\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          isValidNumber(nonExpoNumString.trim())\n            ? new BigDecimal(nonExpoNumString.trim())\n                .format(this)\n                .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n            : nonExpoNumString,\n        )\n      : numberString;\n}\n\nexport const numberStringFormatter = new NumberStringFormat();\n\nexport type LocaleDateTimeOptionKey = string;\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport let dateTimeFormatCache: Map<LocaleDateTimeOptionKey, Intl.DateTimeFormat>;\n\n/**\n * Used to ensure all cached formats are for the same locale.\n *\n * @internal\n */\nlet previousLocaleUsedForCaching: string;\n\n/**\n * Generates a cache key for date time format lookups.\n *\n * @internal\n */\nfunction buildDateTimeFormatCacheKey(options: Intl.DateTimeFormatOptions = {}): string {\n  return Object.entries(options)\n    .sort(([key1], [key2]) => key1.localeCompare(key2))\n    .map((keyValue) => `${keyValue[0]}-${keyValue[1]}`)\n    .flat()\n    .join(\":\");\n}\n\n/**\n * Returns an instance of Intl.DateTimeFormat and reuses it if requested with the same locale and options.\n *\n * **Note**: the cache will be cleared if a different locale is provided\n *\n * @internal\n */\nexport function getDateTimeFormat(locale: string, options?: Intl.DateTimeFormatOptions): Intl.DateTimeFormat {\n  locale = getSupportedLocale(locale);\n\n  if (!dateTimeFormatCache) {\n    dateTimeFormatCache = new Map();\n  }\n\n  if (previousLocaleUsedForCaching !== locale) {\n    dateTimeFormatCache.clear();\n    previousLocaleUsedForCaching = locale;\n  }\n\n  const key = buildDateTimeFormatCacheKey(options);\n  const cached = dateTimeFormatCache.get(key);\n\n  if (cached) {\n    return cached;\n  }\n\n  const format = new Intl.DateTimeFormat(locale, options);\n  dateTimeFormatCache.set(key, format);\n\n  return format;\n}\n","import { Build } from \"@stencil/core\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve(target: Node): void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!Build.isBrowser) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n","import { Build, getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!Build.isBrowser) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange(): void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["getIconScale","componentScale","async","componentOnReady","el","isStencilEl","Promise","resolve","requestAnimationFrame","forceUpdate","Build","isTesting","forceUpdate$1","componentFocusable","isBrowser","CSS","iconCache","requestCache","scaleToPx","s","m","l","generateIconId","_ref","icon","scale","size","name","numberLeadingName","isNaN","Number","charAt","parts","split","length","firstNonDigitInPartPattern","map","part","partIndex","replace","match","offset","toUpperCase","join","concat","normalizeIconName","filled","iconName","substring","getCachedIconDataByKey","id","Icon","proxyCustomElement","HTMLElement","connectedCallback","this","visible","waitUntilVisible","loadIconPathData","disconnectedCallback","_this$intersectionObs","intersectionObserver","disconnect","render","flipRtl","pathData","textLabel","dir","getElementDir","semantic","paths","h","Host","key","toAriaBoolean","role","class","svg","fill","height","viewBox","width","xmlns","path","d","opacity","fetchIconProps","props","cachedIconKey","cachedIconData","fetch","getAssetPath","then","resp","json","catch","console","error","fetchIcon","callback","createObserver","entries","forEach","entry","isIntersecting","rootMargin","observe","isActivationKey","numberKeys","resolveMap","WeakMap","promiseMap","setUpLoadableComponent","component","set","setComponentLoaded","get","componentFocusable$1","unnecessaryDecimal","RegExp","trailingZeros","BigDecimal","constructor","input","integers","decimals","numberString","exponentialParts","number","isSafeInteger","isNegative","magnitude","decimalParts","shiftDecimalLeft","magnitudeDelta","Math","abs","leftPaddedZeros","repeat","slice","shiftDecimalRight","rightPaddedZeros","expandedNumberString","allLeadingZerosOptionallyNegative","expandExponentialNumberString","value","BigInt","padEnd","DECIMALS","ROUNDED","getIntegersAndDecimals","toString","padStart","formatToParts","formatter","numberFormatter","unshift","type","minusSign","push","decimal","char","format","integersFormatted","decimalsFormatted","add","n","fromBigInt","subtract","multiply","_divRound","SHIFT","divide","isValidNumber","parseNumberString","string","some","includes","sanitizeExponentialNumberString","nonExpoNumString","containsDecimal","result","filter","i","dividend","divisor","bigint","Object","assign","create","prototype","decimalOnlyAtEndOfString","allHyphensExceptTheStart","isNegativeDecimalOnlyZeros","hasTrailingDecimalZeros","sanitizeNumberString","sanitizedValue","test","sanitizedValueDecimals","bigDecimalValueInteger","bigDecimalValueDecimals","getBigDecimalAsString","func","firstE","toLowerCase","indexOf","section","addLocalizedTrailingDecimalZeros","localizedValue","trailingDecimalZeros","delocalize","decimalSeparator","localize","defaultLocale","t9nLocales","locales","numberingSystems","isNumberingSystemSupported","numberingSystem","browserNumberingSystem","Intl","NumberFormat","resolvedOptions","defaultNumberingSystem","getSupportedLocale","locale","context","arguments","undefined","contextualLocales","_match","language","region","warn","connectedComponents","Set","connectLocalized","effectiveLocale","_closestElementCrossS","lang","closestElementCrossShadowBoundary","document","documentElement","getLocale","updateEffectiveLocale","mutationObserver","attributes","attributeFilter","subtree","disconnectLocalized","delete","records","record","target","containsCrossShadowBoundary","closestLangEl","closestLang","hasAttribute","numberStringFormatter","_numberFormatOptions","_minusSign","_group","_decimal","_digits","_getDigitIndex","trim","_actualGroup","group","digits","_numberFormatter","numberFormatOptions","options","keys","JSON","stringify","useGrouping","reverse","index","Map","find","Observer","ExtendedMutationObserver","window","MutationObserver","super","observedEntry","unobserve","newObservedEntries","observed","takeRecords","IntersectionObserver","ResizeObserver","getObserver","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","messages","defaultMessages","messageOverrides","noop","setUpMessages","fetchMessages","componentName","tagName","ok","getMessageBundle","updateMessages","connectMessages","onMessagesChange","defaultOnMessagesChange","disconnectMessages"],"sourceRoot":""}